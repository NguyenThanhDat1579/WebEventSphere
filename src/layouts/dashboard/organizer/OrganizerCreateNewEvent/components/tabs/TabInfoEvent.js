// src/components/tabs/TabInfoEvent.js
import React, { useEffect, useRef, useState } from "react";
import {
  Box,
  Typography,
  TextField,
  Grid,
  InputLabel,
  Button,
  Paper,
  FormControl,
  Select,
  MenuItem,
  Popper,
  MenuList,
  Chip,
  CircularProgress,
  Autocomplete,
} from "@mui/material";
import IconButton from "@mui/material/IconButton";
import CloseIcon from "@mui/icons-material/Close";
import AddIcon from "@mui/icons-material/Add";
import axios from "axios";
import SelectMenu from "../SelectMenu";
import TagSelector from "../TagSelector";
import TinyMCEEditor from "../TinyMCEEditor";
import { useDispatch, useSelector } from "react-redux";
import CustomTextField from "../CustomTextField";
import categoryApi from "api/utils/categoryApi";
import PropTypes from "prop-types";
import Snackbar from "@mui/material/Snackbar";
import Alert from "@mui/material/Alert";
import AxiosIntent from "../../../../../../api/axiosInstance";
import provinceData from "../../../../../../data/province.json";
import wardData from "../../../../../../data/ward.json";

import {
  setEventName as setEventNameAction,
  setEventLogo as setEventLogoAction,
  setEventBanner as setEventBannerAction,
  setEventImages,
  setAddressName as setAddressNameAction,
  setFullAddress as setFullAddressAction,
  setCategory as setCategoryAction,
  setTags as setTagsAction,
  setLatitude as setLatitudeAction,
  setLongitude as setLongitudeAction,
  setDescription as setDescriptionAction,
  setOrganizerName as setOrganizerNameAction,
  setOrganizerDescription as setOrganizerDescriptionAction,
  setOrganizerLogo as setOrganizerLogoAction,
  setUserId,
  resetEventInfo,
} from "../../../../../../redux/store/slices/eventInfoSlice";

import {
  setProvince as setProvinceAction,
  setWard as setWardAction,
  setAddress as setAddressAction,
} from "../../../../../../redux/store/slices/eventAddressSlice";

export default function TabInfoEvent({ onNext }) {
  // 1. Redux v√† th∆∞ vi·ªán
  const dispatch = useDispatch();
  const userId = useSelector((state) => state.auth.id);
  const eventInfo = useSelector((state) => state.eventInfo);
  const { province, ward, address } = useSelector((state) => state.eventAddress);
  // 2. State
  const [formData, setFormData] = useState({
    eventName: "",
    addressName: "",
    address: "",
  });
  const [errors, setErrors] = useState({
    eventBanner: "",
    eventName: "",
    addressName: "",
    province: "",
    address: "",
    category: "",
  });

  const [alertStatus, setAlertStatus] = useState(null); // "success", "error", null
  const [alertMessage, setAlertMessage] = useState("");
  const [alertDuration, setAlertDuration] = useState(5000);

  const [eventLogo, setEventLogo] = useState(null); // ·∫£nh logo ƒë√£ l∆∞u
  const [tempLogoFile, setTempLogoFile] = useState(null); // file t·∫°m
  const [previewLogo, setPreviewLogo] = useState(null); // URL preview

  const [eventBanner, setEventBanner] = useState(null);
  const [tempBannerFile, setTempBannerFile] = useState(null); // File t·∫°m
  const [previewBanner, setPreviewBanner] = useState(null); // Preview ·∫£nh m·ªõi

  const [images, setImages] = useState([]); // ·∫£nh ƒë√£ l∆∞u
  const [tempGalleryFiles, setTempGalleryFiles] = useState([]); // ·∫£nh t·∫°m
  const [previewGallery, setPreviewGallery] = useState([]); // ·∫£nh t·∫°m preview

  const [selectedProvince, setSelectedProvince] = useState(province || "");
  const [selectedWard, setSelectedWard] = useState(ward || "");

  const [wards, setWards] = useState([]);

  const provinceOptions = Object.values(provinceData).map((p) => ({
    label: p.name_with_type, // v√≠ d·ª•: "Th√†nh ph·ªë H√† N·ªôi"
    value: p.code, // v√≠ d·ª•: "11"
  }));

  useEffect(() => {
    if (!selectedProvince) {
      setWards([]);
      return;
    }

    const filtered = Object.values(wardData).filter(
      (ward) => ward.parent_code === selectedProvince
    );

    const wardOptions = filtered.map((w) => ({
      label: w.name_with_type,
      value: w.code,
    }));

    setWards(wardOptions);

    // ‚úÖ Ch·ªâ reset n·∫øu ward kh√¥ng c√≤n h·ª£p l·ªá (v√≠ d·ª• ng∆∞·ªùi ƒë√£ ƒë·ªïi t·ªânh)
    const wardStillValid = wardOptions.some((w) => w.value === selectedWard);
    if (!wardStillValid) {
      setSelectedWard("");
    }
  }, [selectedProvince, selectedWard]);

  const [latitude, setLatitude] = useState(null);
  const [longitude, setLongitude] = useState(null);

  const [tagInput, setTagInput] = useState("");
  const [suggestions, setSuggestions] = useState([]);
  const [tags, setTags] = useState([]);
  const [tagError, setTagError] = useState("");

  useEffect(() => {
    const fetchAllTags = async () => {
      try {
        const response = await AxiosIntent.get("/tags/suggest");
        setSuggestions(response.data || []);
      } catch (error) {
        console.error("L·ªói khi t·∫£i tag:", error);
      }
    };

    fetchAllTags();
  }, []);

  const handleCreateTag = (newTag) => {
    const trimmedTag = newTag.trim();
    if (!trimmedTag) {
      setTagError("Tag kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
      return;
    }
    if (tags.includes(trimmedTag)) {
      setTagError("Tag ƒë√£ t·ªìn t·∫°i");
      return;
    }
    setTags((prev) => [...prev, trimmedTag]);
  };

  const [description, setDescription] = useState("");
  const [readyToInitTiny, setReadyToInitTiny] = useState(false);
  // 3. useEffect ‚Äì Theo d√µi v√† load d·ªØ li·ªáu
  useEffect(() => {
    console.log("eventInfo ƒë√£ c·∫≠p nh·∫≠t:", eventInfo);
    if (eventInfo?.avatar) {
      setEventLogo(eventInfo.avatar);
    }
    if (eventInfo?.banner) {
      setEventBanner(eventInfo.banner);
    }
    if (eventInfo?.images) {
      setImages([...eventInfo.images]);
    }

    if (eventInfo?.name) {
      setFormData((prev) => ({
        ...prev,
        eventName: eventInfo.name || "",
      }));
    }
    if (eventInfo?.tags) {
      setTags(eventInfo.tags);
    }

    if (address) {
      setFormData((prev) => ({
        ...prev,
        address: address || "",
      }));
    }
  }, [eventInfo]);
  useEffect(() => {
    const desc = eventInfo?.description?.trim();
    if (desc && desc !== "") {
      setDescription(desc);
    } else {
      setDescription(initialContent);
    }

    setReadyToInitTiny(true); // ‚úÖ ƒë·∫£m b·∫£o Tiny ch·ªâ init khi ƒë√£ c√≥ m√¥ t·∫£
  }, [eventInfo?.description]);

  const handleSelectImage = (e, type) => {
    const file = e.target.files?.[0];
    if (!file) return;

    console.log(`üì∏ ·∫¢nh ${type} ƒë∆∞·ª£c ch·ªçn:`, file.name);
    const previewUrl = URL.createObjectURL(file);

    if (type === "logo") {
      setTempLogoFile(file);
      setPreviewLogo(previewUrl);
    } else if (type === "banner") {
      setTempBannerFile(file);
      setPreviewBanner(previewUrl);
    }

    e.target.value = null; // cho ph√©p ch·ªçn l·∫°i c√πng file
  };

  const uploadImageToCloudinary = async (file) => {
    const formData = new FormData();
    formData.append("file", file);
    formData.append("upload_preset", "event_upload");
    formData.append("cloud_name", "deoqppiun");

    const res = await fetch("https://api.cloudinary.com/v1_1/deoqppiun/image/upload", {
      method: "POST",
      body: formData,
    });
    const data = await res.json();
    return data.secure_url;
  };

  const handleSelectGallery = (e) => {
    const files = Array.from(e.target.files);
    if (!files.length) return;

    // Log
    files.forEach((file) => {
      console.log("üñºÔ∏è ·∫¢nh t·∫°m gallery ƒë∆∞·ª£c ch·ªçn:", file.name);
    });

    // Th√™m v√†o m·∫£ng t·∫°m
    setTempGalleryFiles((prev) => [...prev, ...files]);

    // Th√™m v√†o preview
    const newPreviews = files.map((file) => URL.createObjectURL(file));
    setPreviewGallery((prev) => [...prev, ...newPreviews]);

    e.target.value = null; // reset input
  };

  const handleRemoveSavedImage = (indexToRemove) => {
    setImages((prevImages) => prevImages.filter((_, index) => index !== indexToRemove));
  };
  const handleRemoveTempImage = (indexToRemove) => {
    setPreviewGallery((prev) => prev.filter((_, index) => index !== indexToRemove));
    setTempGalleryFiles((prev) => prev.filter((_, index) => index !== indexToRemove));
  };

  // 5. X·ª≠ l√Ω to·∫° ƒë·ªô
  const getCoordinatesFromAddress = async (fullAddress) => {
    const apiKey = "pJ2xud8j3xprqVfQZLFKjGV51MPH60VjRuZh1i3F";
    try {
      const response = await axios.get("https://rsapi.goong.io/Geocode", {
        params: { address: fullAddress, api_key: apiKey },
      });

      const location = response.data.results?.[0]?.geometry?.location;
      if (location) {
        return { latitude: location.lat, longitude: location.lng };
      } else {
        console.warn("Kh√¥ng t√¨m th·∫•y t·ªça ƒë·ªô.");
        return null;
      }
    } catch (error) {
      console.error("L·ªói khi g·ªçi API to·∫° ƒë·ªô:", error);
      return null;
    }
  };

  // 7. X·ª≠ l√Ω form
  const handleChange = (e) => {
    const { name, value } = e.target;

    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));

    setErrors((prev) => ({
      ...prev,
      [name]: "",
    }));
  };

  // 8. L∆∞u th√¥ng tin s·ª± ki·ªán
  const handleSaveEventInfos = async () => {
    const newErrors = {};
    let hasError = false;

    // ‚úÖ Ki·ªÉm tra l·ªói form
    if (!formData.eventName.trim()) {
      newErrors.eventName = "Vui l√≤ng nh·∫≠p t√™n s·ª± ki·ªán";
      hasError = true;
    }

    if (!selectedProvince) {
      newErrors.selectedProvince = "Vui l√≤ng ch·ªçn t·ªânh/th√†nh";
      hasError = true;
    }

    if (!formData.address.trim()) {
      newErrors.address = "Vui l√≤ng nh·∫≠p s·ªë nh√†, ƒë∆∞·ªùng";
      hasError = true;
    }

    if (tags.length === 0) {
      setTagError("Vui l√≤ng nh·∫≠p √≠t nh·∫•t 1 tag");
      hasError = true;
    } else {
      setTagError("");
    }

    setErrors(newErrors);
    if (hasError) return false;

    // ‚úÖ Hi·ªÉn th·ªã tr·∫°ng th√°i b·∫Øt ƒë·∫ßu
    setAlertStatus("loading");
    setAlertMessage("ƒêang l∆∞u d·ªØ li·ªáu...");
    setAlertDuration(null);
    try {
      let hasChange = false;

      // ‚úÖ Upload logo n·∫øu c√≥
      if (tempLogoFile) {
        const url = await uploadImageToCloudinary(tempLogoFile);
        setEventLogo(url);
        dispatch(setEventLogoAction(url));
        hasChange = true;
      }

      // ‚úÖ Upload banner n·∫øu c√≥
      if (tempBannerFile) {
        const url = await uploadImageToCloudinary(tempBannerFile);
        setEventBanner(url);
        dispatch(setEventBannerAction(url));
        hasChange = true;
      }

      // ‚úÖ Upload gallery n·∫øu c√≥
      if (tempGalleryFiles.length > 0) {
        const uploadPromises = tempGalleryFiles.map(uploadImageToCloudinary);
        const uploadedUrls = await Promise.all(uploadPromises);

        const updatedList = [...images, ...uploadedUrls];
        setImages(updatedList);
        dispatch(setEventImages(updatedList));

        setTempGalleryFiles([]);
        setPreviewGallery([]);

        hasChange = true;
      }

      // ‚úÖ X·ª≠ l√Ω ƒë·ªãa ch·ªâ v√† geocoding
      const provinceName = provinceData[selectedProvince]?.name_with_type || "";
      const wardName = wardData[selectedWard]?.name_with_type || "";
      const fullAddress = `${formData.address}, ${wardName}, ${provinceName}`;

      dispatch(setProvinceAction(selectedProvince));
      dispatch(setWardAction(selectedWard));
      dispatch(setAddressAction(formData.address));

      const coords = await getCoordinatesFromAddress(fullAddress);
      if (coords?.latitude && coords?.longitude) {
        setLatitude(coords.latitude);
        setLongitude(coords.longitude);

        dispatch(setEventNameAction(formData.eventName));
        dispatch(setFullAddressAction(fullAddress));
        dispatch(setCategoryAction("")); // TODO: set ƒë√∫ng category
        dispatch(setTagsAction(tags));
        dispatch(setLatitudeAction(coords.latitude));
        dispatch(setLongitudeAction(coords.longitude));
        dispatch(setDescriptionAction(description));
        dispatch(setUserId(userId));
      } else {
        console.warn("Kh√¥ng c√≥ t·ªça ƒë·ªô h·ª£p l·ªá ƒë·ªÉ l∆∞u.");
      }

      setAlertStatus("success");
      setAlertMessage("ƒê√£ l∆∞u d·ªØ li·ªáu!");
      return true;
    } catch (err) {
      console.error("L·ªói trong qu√° tr√¨nh l∆∞u:", err);
      setAlertStatus("error");
      setAlertMessage("C√≥ l·ªói x·∫£y ra khi l∆∞u d·ªØ li·ªáu.");
      return false;
    } finally {
      setTempLogoFile(null);
      setPreviewLogo(null);
      setTempBannerFile(null);
      setPreviewBanner(null);
    }
  };
  const handleNextClick = async () => {
    const isValid = await handleSaveEventInfos();
    if (isValid) {
      onNext(); // do EventTabContent truy·ªÅn xu·ªëng
    }
  };

  // 9. N·ªôi dung m·∫´u RichText (editor)
  const initialContent = `
  <h4>Gi·ªõi thi·ªáu s·ª± ki·ªán:</h4>
  <p><em>[T√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ s·ª± ki·ªán...]</em></p>

  <h4>Chi ti·∫øt s·ª± ki·ªán:</h4>
  <p><strong>Ch∆∞∆°ng tr√¨nh ch√≠nh:</strong> <em>[...]</em></p>
  <p><strong>Kh√°ch m·ªùi:</strong> <em>[...]</em></p>
  <p><strong>Tr·∫£i nghi·ªám ƒë·∫∑c bi·ªát:</strong> <em>[...]</em></p>

  <h4>ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán:</h4>
  <p><em>[...]</em></p>
`;

  return (
    <Box>
      {/* ‚úÖ Khung: ·∫¢nh & T√™n s·ª± ki·ªán */}
      <Paper elevation={3} sx={{ p: 3, mb: 4 }}>
        <Typography variant="h6" gutterBottom>
          <span style={{ color: "red" }}>*</span> Upload h√¨nh ·∫£nh
        </Typography>
        <Grid container spacing={3}>
          <Grid item xs={12} sm={12}>
            <Button
              variant="outlined"
              component="label"
              fullWidth
              sx={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                height: 370,
                overflow: "hidden",
              }}
            >
              {previewLogo || eventLogo ? (
                <Box sx={{ width: "90%", textAlign: "center" }}>
                  <img
                    src={previewLogo || eventLogo}
                    alt="Logo s·ª± ki·ªán"
                    style={{
                      width: "100%",
                      maxHeight: 360,
                      objectFit: "contain",
                      borderRadius: 8,
                    }}
                  />
                </Box>
              ) : (
                <Box textAlign="center">
                  <Typography sx={{ color: "#1976D2" }}>Th√™m logo s·ª± ki·ªán</Typography>
                  <Typography variant="body2" fontWeight="bold" sx={{ color: "#1976D2" }}>
                    (720x958)
                  </Typography>
                </Box>
              )}

              <input
                hidden
                type="file"
                accept="image/*"
                onChange={(e) => handleSelectImage(e, "logo")}
              />
            </Button>
          </Grid>
          <Grid item xs={12} sm={12}>
            <Button
              variant="outlined"
              component="label"
              fullWidth
              sx={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                color: "black",
                height: 370,
                textTransform: "none",
              }}
            >
              {previewBanner ? (
                <Box sx={{ width: "90%", textAlign: "center" }}>
                  <img
                    src={previewBanner}
                    alt="Preview banner"
                    style={{
                      width: "100%",
                      maxHeight: 360,
                      objectFit: "contain",
                      borderRadius: 8,
                    }}
                  />
                </Box>
              ) : eventBanner ? (
                <Box sx={{ width: "90%", textAlign: "center" }}>
                  <img
                    src={eventBanner}
                    alt="·∫¢nh n·ªÅn s·ª± ki·ªán"
                    style={{
                      width: "100%",
                      maxHeight: 360,
                      objectFit: "contain",
                      borderRadius: 8,
                    }}
                  />
                </Box>
              ) : (
                <Box textAlign="center">
                  <Typography sx={{ color: "#1976D2" }}>Th√™m ·∫£nh n·ªÅn s·ª± ki·ªán</Typography>
                  <Typography variant="body2" fontWeight="bold" sx={{ color: "#1976D2" }}>
                    (1920x1080)
                  </Typography>
                </Box>
              )}

              <input
                hidden
                type="file"
                accept="image/*"
                onChange={(e) => handleSelectImage(e, "banner")}
              />
            </Button>

            {errors.eventBanner && (
              <Typography variant="body2" color="red" sx={{ mt: 0.5, ml: 1 }}>
                {errors.eventBanner}
              </Typography>
            )}
          </Grid>
          {/* <Typography variant="h6" gutterBottom sx={{ mt: 5, px: 3, mb: -6 }}>
            <span style={{ color: "red" }}>*</span> H√¨nh ·∫£nh li√™n quan
          </Typography>

          <Grid container spacing={2} sx={{ flexWrap: "nowrap", overflowX: "auto", mt: 2, p: 3 }}>
        
            {images.map((url, index) => (
              <Grid item key={`saved-${index}`} sx={{ position: "relative" }}>
                <img
                  src={url}
                  alt={`image-${index}`}
                  style={{
                    width: 192,
                    height: 108,
                    borderRadius: 8,
                    objectFit: "cover",
                  }}
                />
                <IconButton
                  size="small"
                  onClick={() => handleRemoveSavedImage(index)}
                  sx={{
                    position: "absolute",
                    top: 3,
                    right: -10,
                    bgcolor: "white",
                    borderRadius: "50%",
                    width: 24,
                    height: 24,
                    boxShadow: 1,
                    p: 0.5,
                    "&:hover": { bgcolor: "error.main", color: "white" },
                  }}
                >
                  <CloseIcon sx={{ fontSize: 16 }} />
                </IconButton>
              </Grid>
            ))}

            {previewGallery.map((url, index) => (
              <Grid item key={`preview-${index}`} sx={{ position: "relative" }}>
                <img
                  src={url}
                  alt={`preview-${index}`}
                  style={{
                    width: 192,
                    height: 108,
                    borderRadius: 8,
                    objectFit: "cover",
                    opacity: 0.8,
                  }}
                />
                <IconButton
                  size="small"
                  onClick={() => handleRemoveTempImage(index)}
                  sx={{
                    position: "absolute",
                    top: 3,
                    right: -10,
                    bgcolor: "white",
                    borderRadius: "50%",
                    width: 24,
                    height: 24,
                    boxShadow: 1,
                    p: 0.5,
                    "&:hover": { bgcolor: "error.main", color: "white" },
                  }}
                >
                  <CloseIcon sx={{ fontSize: 16 }} />
                </IconButton>
              </Grid>
            ))}

            <Grid item>
              <Box
                component="label"
                sx={{
                  width: 192,
                  height: 108,
                  border: "2px dashed gray",
                  borderRadius: 2,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  flexDirection: "column",
                  cursor: "pointer",
                  color: "gray",
                  "&:hover": {
                    borderColor: "primary.main",
                    color: "primary.main",
                  },
                }}
              >
                <AddIcon fontSize="large" />
                <Typography variant="body2" fontWeight="medium">
                  Th√™m ·∫£nh
                </Typography>
                <input
                  hidden
                  type="file"
                  accept="image/*"
                  multiple
                  onChange={handleSelectGallery}
                />
              </Box>
            </Grid>
          </Grid> */}
          <Grid item xs={12}>
            <CustomTextField
              name="eventName"
              label={
                <>
                  <span style={{ color: "red" }}>*</span> T√™n s·ª± ki·ªán
                </>
              }
              value={formData.eventName}
              onChange={handleChange}
              placeholder="Nh·∫≠p t√™n s·ª± ki·ªán"
              maxWidth="100%"
              maxLength={100}
              error={!!errors.eventName}
              helperText={errors.eventName}
            />
          </Grid>
        </Grid>
      </Paper>

      <Paper elevation={3} sx={{ p: 3, mb: 4 }}>
        <Typography variant="h6" gutterBottom>
          ƒê·ªãa ch·ªâ s·ª± ki·ªán
        </Typography>

        <Grid container spacing={3}>
          {/* T√™n ƒë·ªãa ƒëi·ªÉm */}
          {/* <Grid item xs={12}>
            <CustomTextField
              name="addressName"
              label={
                <>
                  <span style={{ color: "red" }}>*</span> T√™n ƒë·ªãa ƒëi·ªÉm
                </>
              }
              value={formData.addressName}
              onChange={handleChange}
              placeholder="Nh·∫≠p t√™n ƒë·ªãa ƒëi·ªÉm"
              maxLength={80}
              maxWidth="100%"
              error={!!errors.addressName}
              helperText={errors.addressName}
            />
          </Grid> */}
          {/* T·ªânh / Th√†nh */}
          <Grid item xs={12} sm={6}>
            <Typography variant="h6" gutterBottom>
              <span style={{ color: "red" }}>*</span> T·ªânh/Th√†nh
            </Typography>
            <SelectMenu
              label="Ch·ªçn t·ªânh / th√†nh ph·ªë"
              value={selectedProvince}
              onChange={(val) => {
                setSelectedProvince(val);
                setSelectedWard(""); // reset x√£
              }}
              options={provinceOptions}
              searchable
            />
          </Grid>

          {/* Ph∆∞·ªùng / X√£ */}
          <Grid item xs={12} sm={6}>
            <Typography variant="h6" gutterBottom>
              Ph∆∞·ªùng/X√£
            </Typography>
            <SelectMenu
              label="Ch·ªçn ph∆∞·ªùng / x√£"
              value={selectedWard}
              onChange={(val) => setSelectedWard(val)}
              options={wards}
              searchable
            />
          </Grid>

          {/* S·ªë nh√†, ƒë∆∞·ªùng */}
          <Grid item xs={12} sm={6}>
            <Typography variant="h6" gutterBottom>
              <span style={{ color: "red" }}>*</span> S·ªë nh√†, ƒë∆∞·ªùng
            </Typography>
            <CustomTextField
              name="address"
              value={formData.address}
              onChange={handleChange}
              placeholder="Nh·∫≠p s·ªë nh√†, ƒë∆∞·ªùng"
              maxLength={80}
              maxWidth="100%"
              error={!!errors.address}
              helperText={errors.address}
            />
          </Grid>
        </Grid>
      </Paper>

      <Paper elevation={3} sx={{ p: 3, mb: 4 }}>
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <Typography variant="h6" gutterBottom>
              <span style={{ color: "red" }}>*</span> Tag
            </Typography>

            <Box sx={{ display: "flex", gap: 1 }}>
              <TagSelector
                label="Ch·ªçn Tag"
                value={tags}
                onChange={(updatedSelectedTags) => {
                  setTags(updatedSelectedTags); // ‚úÖ c·∫≠p nh·∫≠t tr·ª±c ti·∫øp

                  // Optional: x·ª≠ l√Ω t·∫°o tag n·∫øu mu·ªën (ch·ªâ khi tag m·ªõi kh√¥ng n·∫±m trong g·ª£i √Ω)
                  updatedSelectedTags.forEach((tag) => {
                    if (!suggestions.includes(tag)) {
                      handleCreateTag(tag);
                    }
                  });

                  setTagError(""); // x√≥a l·ªói n·∫øu c√≥
                }}
                options={suggestions.map((tag) => ({ label: tag, value: tag }))}
                searchable
              />
            </Box>
            {tagError && (
              <Typography color="error" fontSize={13} mt={0.5}>
                {tagError}
              </Typography>
            )}

            <Box sx={{ mt: 2, display: "flex", flexWrap: "wrap", gap: 1 }}>
              {tags.map((tag, index) => (
                <Chip
                  key={index}
                  label={tag}
                  onDelete={() => setTags((prev) => prev.filter((_, i) => i !== index))}
                  deleteIcon={<CloseIcon />}
                  color="info"
                  variant="outlined"
                />
              ))}
            </Box>
          </Grid>
        </Grid>
      </Paper>

      <Paper elevation={3} sx={{ pt: 3, mb: 4 }}>
        <Typography variant="h6" gutterBottom sx={{ pl: 3 }}>
          Th√¥ng tin s·ª± ki·ªán
        </Typography>
        <Grid container spacing={3}>
          <Grid item xs={12} sm={12}>
            <TinyMCEEditor value={description} onChange={setDescription} ready={readyToInitTiny} />
          </Grid>
        </Grid>
      </Paper>
      <Box
        sx={{
          display: "flex",
          justifyContent: "flex-end",
          mt: 3,
          gap: 2,
        }}
      >
        <Button
          variant="outlined"
          color="primary"
          onClick={handleSaveEventInfos}
          sx={{
            color: "#5669FF",
            borderColor: "#5669FF",
            backgroundColor: "#fff",
            "&:hover": {
              backgroundColor: "#5669FF",
              color: "#fff",
            },
          }}
        >
          L∆∞u
        </Button>

        <Button
          variant="contained"
          sx={{
            backgroundColor: "#5669FF",
            color: "#fff",
            border: "1px solid #5669FF",
            "&:hover": {
              backgroundColor: "#fff",
              color: "#5669FF",
            },
          }}
          onClick={handleNextClick}
        >
          Ti·∫øp t·ª•c
        </Button>
      </Box>
      <Snackbar
        open={Boolean(alertStatus)}
        autoHideDuration={alertDuration}
        onClose={() => setAlertStatus(null)}
        anchorOrigin={{ vertical: "top", horizontal: "center" }}
      >
        <Alert
          severity={
            alertStatus === "loading" ? "info" : alertStatus === "success" ? "success" : "error"
          }
          sx={{ width: "100%", display: "flex", alignItems: "center" }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
}
TabInfoEvent.propTypes = {
  onNext: PropTypes.func.isRequired,
};
